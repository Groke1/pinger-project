version: "3.9"

services:
  postgres:
    image: postgres:13
    container_name: postgres
    restart: always
    volumes:
      - postgres_data:/var/lib/postgesql/data
    networks:
      - pinger_net
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=qwerty
      - POSTGRES_DB=db_name
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "user", "-d", "db_name" ]
      interval: 10s
      retries: 5

  migrate:
    image: flyway/flyway:7.8.1-alpine
    container_name: migrate
    networks:
      - pinger_net
    command: migrate -url=jdbc:postgresql://postgres:5432/db_name -user=user -password=qwerty
    volumes:
      - ./migrations:/flyway/sql
    depends_on:
      postgres:
          condition: service_healthy

  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    restart: always
    networks:
      - pinger_net
    ports:
      - "2181:2181"

  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    restart: always
    networks:
      - pinger_net
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL: PLAINTEXT
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    depends_on:
      - zookeeper
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "9092" ]
      interval: 10s
      retries: 5

  backend:
    build: ./backend
    container_name: backend
    networks:
      - pinger_net
    ports:
      - "8080:8080"
    environment:
      - DB_USER=user
      - DB_PASS=qwerty
      - DB_NAME=db_name
    depends_on:
      - postgres
      - kafka

  pinger:
    build: ./pinger
    container_name: pinger
    networks:
      - pinger_net
    depends_on:
      - postgres
      - kafka
      - backend
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  frontend:
    build: ./frontend
    container_name: frontend
    networks:
      - pinger_net
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - CHOKIDAR_USEPOLLING=true
    depends_on:
      - backend

volumes:
  postgres_data:
networks:
  pinger_net:
    driver: bridge

